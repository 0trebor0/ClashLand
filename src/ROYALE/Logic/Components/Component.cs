using CRepublic.Royale.Extensions.List;
using CRepublic.Royale.Logic.Slots.Items;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CRepublic.Royale.Logic.Components
{
    internal class Component
    {
        internal Player Player;

        internal Component(Player Player)
        {
            this.Player = Player;
        }

        internal byte[] ToBytes
        {
            get
            {
                int TimeStamp = (int)DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalSeconds;

                List<byte> _Packet = new List<byte>();

                _Packet.AddLong(this.Player.UserId);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(1698340);
                _Packet.AddVInt(1727920);

                _Packet.AddVInt(TimeStamp);

                _Packet.AddVInt(0);
                _Packet.AddVInt(1);
                {
                    _Packet.AddVInt(8);

                    foreach (Card _Card in this.Player.Decks.GetRange(0, 8))
                    {
                        _Packet.AddVInt(_Card.GId);
                    }
                }

                _Packet.Add(255); // Deck Thingy

                _Packet.AddRange(this.Player.Decks.ToBytes());

                _Packet.AddVInt(this.Player.Decks.Count - 8);

                foreach (Card _Card in this.Player.Decks.Skip(8))
                {
                    _Packet.AddVInt(_Card.ID);
                    _Packet.AddVInt(_Card.Level);
                    _Packet.AddVInt(0);
                    _Packet.AddVInt(_Card.Count);
                    _Packet.AddVInt(0);
                    _Packet.AddVInt(0);
                    _Packet.AddVInt(_Card.New);
                }

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);
                _Packet.AddVInt(0);

                _Packet.AddVInt(63);
                _Packet.AddVInt(63);

                _Packet.AddVInt(TimeStamp);

                _Packet.AddVInt(1);

                _Packet.AddVInt(0);

                _Packet.AddVInt(5);

                _Packet.AddVInt(34);

                #region Events

                _Packet.AddString("Musketeer Stack Offer");

                _Packet.AddVInt(1); // Unknown

                _Packet.AddHexa("909CB98F0B"); // Start

                _Packet.AddHexa("90E2C38F0B"); // End

                _Packet.AddHexa("909CB98F0B"); // Remaining

                _Packet.AddHexa("0000000000000000");

                _Packet.AddString("Musketeer Stack Offer");

                _Packet.AddHexa

                #endregion

                //_Packet.AddVInt(0);
                //_Packet.AddVInt(4);

                //_Packet.AddRange(this.Chests.ToBytes());

                _Packet.AddHexa("00040113030009060000"); // Chest 1

                _Packet.AddHexa("00041303000B060100000080942380942393E98C900B00007F0113070102007F0000000000000000000000000000B8E3D10184F7D201B9C695900BB8E3D10184F7D201B9C695900B"); // Chest 2

                //_Packet.AddVInt(287600);
                //_Packet.AddVInt(288000);

                //_Packet.AddVInt(TimeStamp);

                _Packet.AddVInt(0);
                _Packet.AddVInt(0);
                _Packet.AddVInt(0);
                _Packet.AddVInt(127);

                _Packet.AddVInt(1); // 0 = Tuto Upgrade Spell

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);

                _Packet.AddVInt(2); // 0, 1 = Animation Page Card (Tuto)

                _Packet.AddVInt(this.Player.Level); // Old Level

                _Packet.AddVInt(55);

                _Packet.AddVInt(this.Player.Arena); // Old Arena

                _Packet.AddHexa("DDCEA7DB0E0505B0B9B601B0B9");

                _Packet.AddVInt(TimeStamp);

                // 3 - Normal
                // 6 - Epic (Has to be Sunday for this to work?) // Simons answer: YES

                _Packet.AddVInt(3);

                _Packet.AddHexa("018201020000000000001A0100018201020000000000001C0001018201020000000000001A0702");

                _Packet.AddVInt(0);

                _Packet.AddVInt(0);
                _Packet.AddVInt(0);
                _Packet.AddVInt(127);

                _Packet.AddVInt(0);
                _Packet.AddVInt(0);
                _Packet.AddVInt(127);

                _Packet.AddVInt(0);
                _Packet.AddVInt(0);
                _Packet.AddVInt(127);

                _Packet.AddHexa("00000000000000000000000900000000F80101000001000000020000010000000E000001000000820100000100000081010000010000000400000100000001AEEAE51801AEEAE5180000000001B0F3B6900B000001018AE6BF3300000000000000");

                return _Packet.ToArray();
            }
        }
    }
}
